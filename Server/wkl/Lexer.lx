#include "Lexer.h"
#include "Terminals/Terminals.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sstream>
#include <assert.h>

#define token 	bufstart

Lexer::Lexer(stringstream* input)
	: pos(1, 0) {
	this->input = input;
	indent = 0;
	d_indent = 0;
	buffer = new char[BUF_SIZE];
	bufstart = buffer;
	cursor = buffer;
	limit = buffer;
	marker = buffer;
	toklen = 0;
	fill();
}

void Lexer::fill(){
	assert(cursor==limit);
	//TODO: Handle the case below by extending the buffer
	assert(!(buffer==bufstart && buffer + BUF_SIZE == limit));

	//Move memory in the buffer
	int relative = bufstart - buffer;
	memmove(buffer,bufstart,limit-bufstart);
	
	//Move pointers
	bufstart -= relative;
	marker -= relative;
	cursor -= relative;
	limit -= relative;

	//Read data
	int reqbyte =  buffer + BUF_SIZE - limit;
	input->read(limit, reqbyte);
	limit += input->gcount();

	//Handle EOF and possible errors
	if(input->eof()){
		//*limit = 0x4; //eof
		uint8_t* tmp = (uint8_t*)limit;
		*tmp = 0x4;
	}else if(input->fail()){
		//TODO: Handle IO error
		fprintf(stderr, "Error reading input file!\n");
		exit(1);		
	}
}

Terminal* Lexer::nextToken(){

BEGIN:
	//Add offset from last token
	this->pos._col += toklen;
	//The DFA:
/*** LX ***
groups:

[a-z]    {a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z}
[A-Z]    {A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z}
[a-Z]    {a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z}
[0-9]    {0|1|2|3|4|5|6|7|8|9}
[1-9]    {1|2|3|4|5|6|7|8|9}
[symbols]	{\x0A|\x20|\x21|\x23|\x24|\x25|\x26|\x28|\x29|\x2A|\x2B|\x2C|\x2D|\x2E|\x2F|\x3A|\x3B|\x3C|\x3D|\x3E|\x3F|\x40|\x5B|\x5C|\x5D|\x5E|\x5F|\x60|\x7B|\x7C|\x7D|\x7E}

rules:
{def} 											{cerr<<"terminal def"<<endl; return new Terminal(TOKEN_def, pos);}
{if} 											{cerr<<"terminal if"<<endl; return new Terminal(TOKEN_if, pos);}
{while}											{cerr<<"terminal while"<<endl; return new Terminal(TOKEN_while, pos);}
{for}											{cerr<<"terminal for"<<endl; return new Terminal(TOKEN_for, pos);}
{in}											{cerr<<"terminal in"<<endl; return new Terminal(TOKEN_in, pos);}
{out}											{cerr<<"terminal out"<<endl; return new Terminal(TOKEN_out, pos);}
{return}										{cerr<<"terminal return"<<endl; return new Terminal(TOKEN_return, pos);}
{=}												{cerr<<"terminal assignment"<<endl; return new Terminal(TOKEN_assignment, pos);}
{,} 											{cerr<<"terminal comma"<<endl;return new Terminal(TOKEN_comma, pos);}
{.} 											{cerr<<"terminal dot"<<endl;return new Terminal(TOKEN_dot, pos);}
{+} 											{cerr<<"terminal plus"<<endl;return new Terminal(TOKEN_plus, pos);}
{-} 											{cerr<<"terminal minus"<<endl;return new Terminal(TOKEN_minus, pos);}
{;} 											{cerr<<"terminal semicolon"<<endl;return new Terminal(TOKEN_semicolon, pos);}
{\(} 											{cerr<<"terminal leftp"<<endl;return new Terminal(TOKEN_left_p, pos);}
{\)} 											{cerr<<"terminal rightp"<<endl;return new Terminal(TOKEN_right_p, pos);}
{\{} 											{cerr<<"terminal leftcur"<<endl;return new Terminal(TOKEN_left_c, pos);}
{\}} 											{cerr<<"terminal rightcur"<<endl;return new Terminal(TOKEN_right_c, pos);}
{_*[a-Z]([a-Z]|[0-9]|_)*} 					{cerr<<"terminal id"<<endl;return new Identifier(token, toklen, pos);}
{[0-9]+} 										{cerr<<"terminal int"<<endl;return IntegerFromDecimalString(token, toklen, pos);}
{\x04}											{cerr<<"terminal eof"<<endl;return new Terminal(TOKEN_EOF, pos);}
{ }												{cerr<<"space"<<endl;goto BEGIN;}
{\t}										    {cerr<<"tab"<<endl;goto BEGIN;}
{\r}											{cerr<<"newline lf"<<endl;goto BEGIN;}
{\n}											{cerr<<"newline cr"<<endl;goto BEGIN;}

accept:
	{toklen = marker - bufstart;}
error:
	{cerr<<"terminal ERROR"<<endl;return new Terminal(TOKEN_error, pos);}
*** LX ***/

}

